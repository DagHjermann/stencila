<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE article PUBLIC "-//NLM//DTD JATS (Z39.96) Journal Archiving and Interchange DTD v1.1d3 20150301//EN"  "JATS-archivearticle1.dtd">
<article xmlns:xlink="http://www.w3.org/1999/xlink">
  <front>
    <article-meta>
      <title-group>
        <article-title>An article with code cells in external languages</article-title>
      </title-group>
      <contrib-group>
        <contrib contrib-type="author" aff-ids="aff1">
          <x specific-use="display">Nokome Bentley</x>
        </contrib>
        <contrib contrib-type="author" aff-ids="aff2">
          <x specific-use="display">Michael Aufreiter</x>
        </contrib>
        <contrib contrib-type="author" aff-ids="aff2">
          <x specific-use="display">Oliver Buchtala</x>
        </contrib>
        <contrib contrib-type="author" aff-ids="aff2">
          <x specific-use="display">Daniel Bellison</x>
        </contrib>
      </contrib-group>
      <aff id="aff1">
        <x specific-use="display">Stencila</x>
      </aff>
      <aff id="aff2">
        <x specific-use="display">Substance Software GmbH</x>
      </aff>
      <abstract>
        <p>This example includes code cells for "external" languages - R, Python and SQL. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit essecillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
      </abstract>
    </article-meta>
  </front>
  <body>

    <sec>
      <title>Introduction</title>

      <p>To execute the code cells you will need to have an external Stencila Host running which supports R, Python and SQL languages. See our <ext-link xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="https://community.stenci.la/t/getting-started-with-stencila" ext-link-type="uri" xlink:type="simple">getting started guide</ext-link> for instructions on running a Stencila Host. Then append <bold>&amp;peers=http://localhost:2000></bold> to the end of the URL.</p>

      <p>Alternatively, you can use Stencila Cloud by appending <bold>&amp;peers=https://cloud.stenci.la?ticket=XXXXXXXX</bold> to the end of the URL. Ask us for a ticket (the XXXXXXXX part).</p>
    </sec>

    <sec>
      <title>R</title>

      <p><italic>R</italic> is a popular computing language for statistical data analysis. You can insert a new code cell and choose "R" from the menu to switch the language to R. When you alter the R code in the cell it is re-executed by sending the chunk of code to the externally running R session. For example, here is an R cell with which plots some random numbers, try changing any of the cell (the comments for example) and the plot will update.</p>

      <code specific-use="cell"><named-content><alternatives>
        <code specific-use="source" language="r"><![CDATA[# A random (but colourful!) plot in R
x <- runif(1000)
y <- cos(x + runif(1000))
col <- hsv((y+1)/2, 0.9, 1, 0.3)
plot(x, y, pch=16, cex=1.8, col=col, ylab='cos(x)+e')]]></code>
        <code specific-use="output" language="json"><![CDATA[{}]]></code>
      </alternatives></named-content></code>

      <p>You can pass variables from <italic>Mini</italic> to <italic>R</italic>. For example, below is a Mini cell which defines a variable called <bold>sample_size</bold> which we then pass through to an R cell. The R cell draws <bold>sample_size</bold> random samples from a Normal (Guassian) distribution. Try altering sample size .... </p>

      <code specific-use="cell"><named-content><alternatives>
        <code specific-use="source" language="mini"><![CDATA[sample_size = 1000]]></code>
        <code specific-use="output" language="json"><![CDATA[{}]]></code>
      </alternatives></named-content></code>

      <fig id="f1" fig-type="repro-fig">
        <caption>
          <title>Histogram of a random sample of variates from a normal distribution</title>
          <p>An example plot in R. Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit essecillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
        </caption>
        <alternatives>
          <code specific-use="source" language="r"><![CDATA[hist(rnorm(min(sample_size, 1e5)), breaks=40, col=hsv(0.6, 0.9, 1), xlab="Value", main="")]]></code>
          <code specific-use="output" language="json"><![CDATA[{}]]></code>
        </alternatives>
      </fig>

      <p>You can also pass variables from <italic>R</italic> to <italic>Mini</italic>. For example, below is a R cell which creates a table from the "diamonds</p>

      <code specific-use="cell"><named-content><alternatives>
        <code specific-use="source" language="r"><![CDATA[library(ggplot2)
head(diamonds)]]></code>
        <code specific-use="output" language="json"><![CDATA[{}]]></code>
      </alternatives></named-content></code>

    </sec>

    <sec>
      <title>SQL</title>

      <p>You can execute SQL cells using a "SqliteContext". As with other languages you can pass data to the execution context. Here, we assign the built in R dataset "mtcars" to a variable called "cars_data" and then query it using SQL:</p>

      <code specific-use="cell"><named-content><alternatives>
        <code specific-use="source" language="r"><![CDATA[cars_data = mtcars
cars_data]]></code>
        <code specific-use="output" language="json"><![CDATA[{}]]></code>
      </alternatives></named-content></code>

      <code specific-use="cell"><named-content><alternatives>
        <code specific-use="source" language="sql"><![CDATA[SELECT * FROM cars_data WHERE carb=4 ORDER BY hp DESC]]></code>
        <code specific-use="output" language="json"><![CDATA[{}]]></code>
      </alternatives></named-content></code>

    </sec>

  </body>
  <back>
    <ref-list>
      <title>References</title>
      <ref id="R1">
        <element-citation publication-type="journal">
          <person-group person-group-type="author"><name><surname>Eve</surname><given-names>Martin</given-names></name></person-group>
          <year>2016</year>
          <article-title>Of LaTeX and labour.</article-title>
          <source>https://www.martineve.com/2016/09/14/of-latex-and-labour/</source>
        </element-citation>
      </ref>
      <ref id="R2">
        <element-citation publication-type="journal">
          <person-group person-group-type="author"><name><surname>Garnett</surname><given-names>Alex</given-names></name><name><surname>Alperin</surname><given-names>Juan Pablo</given-names></name><name><surname>Willinsky</surname><given-names>John</given-names></name></person-group>
          <year>2015</year>
          <article-title>The Public Knowledge Project XML Publishing Service and meTypeset: Donâ€™t call it "Yet Another Word-to-JATS Conversion Kit."</article-title>
          <source>https://www.ncbi.nlm.nih.gov/books/NBK279666/</source>
        </element-citation>
      </ref>
      <ref id="R3">
        <element-citation publication-type="journal">
          <person-group person-group-type="author"><name><surname>Eve</surname><given-names>Martin</given-names></name></person-group>
          <year>2015</year>
          <article-title>Building a real XML-first (XML-in) workflow for scholarly typesetting.</article-title>
          <source>https://www.martineve.com/2015/07/20/building-a-real-xml-first-workflow-for-scholarly-typesetting/</source>
        </element-citation>
      </ref>
    </ref-list>
  </back>
</article>
