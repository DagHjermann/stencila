From 0c69df5ac098640018d9232ae71ed1036c692187 Mon Sep 17 00:00:00 2001
From: Micah Elizabeth Scott <micah@scanlime.org>
Date: Tue, 5 Nov 2013 16:53:01 -0800
Subject: [PATCH] Implement a DeepCopy() method for rapidjson::Document

This can be used to copy entire documents or arbitrary Value subtrees from
one document to another. There's no refcounting going on, so we have to
copy the whole tree. Strings are copied by default, but they can optionally
be referenced instead.
---
 document.h | 23 ++++++++++++++++++-----
 1 file changed, 18 insertions(+), 5 deletions(-)

diff --git a/document.h b/document.h
index 402b65d..9ed47c3 100755
--- a/document.h
+++ b/document.h
@@ -491,7 +491,7 @@ int z = a[0u].GetInt();				// This works too.
 		\param handler An object implementing concept Handler.
 	*/
 	template <typename Handler>
-	const GenericValue& Accept(Handler& handler) const {
+	const GenericValue& Accept(Handler& handler, bool copyStrings = false) const {
 		switch(GetType()) {
 		case kNullType:		handler.Null(); break;
 		case kFalseType:	handler.Bool(false); break;
@@ -500,8 +500,8 @@ int z = a[0u].GetInt();				// This works too.
 		case kObjectType:
 			handler.StartObject();
 			for (Member* m = data_.o.members; m != data_.o.members + data_.o.size; ++m) {
-				handler.String(m->name.data_.s.str, m->name.data_.s.length, false);
-				m->value.Accept(handler);
+				handler.String(m->name.data_.s.str, m->name.data_.s.length, copyStrings);
+				m->value.Accept(handler, copyStrings);
 			}
 			handler.EndObject(data_.o.size);
 			break;
@@ -509,12 +509,12 @@ int z = a[0u].GetInt();				// This works too.
 		case kArrayType:
 			handler.StartArray();
 			for (GenericValue* v = data_.a.elements; v != data_.a.elements + data_.a.size; ++v)
-				v->Accept(handler);
+				v->Accept(handler, copyStrings);
 			handler.EndArray(data_.a.size);
 			break;
 
 		case kStringType:
-			handler.String(data_.s.str, data_.s.length, false);
+			handler.String(data_.s.str, data_.s.length, copyStrings);
 			break;
 
 		case kNumberType:
@@ -760,11 +760,24 @@ class GenericDocument : public GenericValue<Encoding, Allocator> {
 	//! Get the capacity of stack in bytes.
 	size_t GetStackCapacity() const { return stack_.GetCapacity(); }
 
+	//! Deep copy of a Value tree from another document to this document
+	/*! \param destValue An existing value in this document, where the copy will be placed.
+	    \param srcValue A value in any other document, where the deep copy will start.
+		\return The document itself for fluent API.
+	*/
+	template <typename T>
+	GenericDocument& DeepCopy(ValueType &destValue, const GenericValue<Encoding, T> &srcValue, bool copyStrings = true) {
+		srcValue.Accept(*this, copyStrings);
+		destValue.RawAssign(*stack_.template Pop<ValueType>(1));
+		return *this;
+	}
+
 private:
 	// Prohibit assignment
 	GenericDocument& operator=(const GenericDocument&);
 
 	friend class GenericReader<Encoding, Allocator>;	// for Reader to call the following private handler functions
+	friend class GenericValue<Encoding, Allocator>;		// For DeepCopy
 
 	// Implementation of Handler
 	void Null()	{ new (stack_.template Push<ValueType>()) ValueType(); }
-- 
1.9.1

